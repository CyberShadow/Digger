# This file is a bisect spec example.
# Copy this file to another filename, and make the appropriate
# changes below.

# Starting points.
# Known bad (with regression) and good (w/o regression) commits.
# Digger will verify these commits to avoid a false conclusion.
# Supported formats:
# - "master" (implies latest commit)
# - SHA-1 hash of D.git repo commit
# - SHA-1 hash of a component's repo commit
#   (must be a pull request merge commit)
# - Full GitHub URL of a pull request, e.g.:
#   https://github.com/dlang/dmd/pull/123
# - Optionally, "@" followed by a time spec (e.g. "@ 2013-01-02",
#   "master @ October 2013", "2.065 @ 15 days ago" or "@ Tuesday")
#   or a tag (e.g. "master @ v2.085.0").
#   If no ref is specified, master is assumed.

bad  = master
good = @ 1 month ago

# Reverse search
# Sometimes, it is useful to know to know which revision fixed
# something. Although this can be accomplished by reversing the
# return value of the test command, the terminology can get
# confusing, since "good" will mean "still broken" and "bad"
# will mean "already fixed". This option causes Digger to
# reverse the test command output, as well as diagnostic
# messages.

reverse = false

# Tester command.
# Should exit with status 0 to indicate success (a "good" commit,
# not manifesting the regression), and any other status to
# indicate failure (a "bad" commit, with the regression).
# Exit code 125 is treated specially and indicates that the
# current D revision is untestable, and that Git should try
# another.
# The current bisected version of DMD will be in PATH,
# so there's no need to specify an absolute path to it.

tester = cd C:\Temp && dmd -o- test.d

# If you want to bisect a D build failure, enable bisectBuild.
# Instead of executing the tester command, Digger will use
# whether the D build succeeds as the signal for bisection.
# Note that if bisectBuild is enabled, the tester option must
# be unset.

#bisectBuild = true

# Similarly, if you'd like to bisect a D test failure.
# Implies bisectBuild.

#bisectBuildTest = true

# Test environment.
# Uses the same syntax as build.environment, however it
# is only applied during the execution of the tester
# command specified above.

# Extra patches to apply at every bisect step.
# Specified in the same way as a build spec for "digger build",
# but without the leading branch name.

#extraSpec = +dmd#9425

[environment]

# Optionally, you can specify additional build options.
# These use the same format, and override those found in digger.ini.
[build]

components.enable.rdmd = false
